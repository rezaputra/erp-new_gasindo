// DATABASE CONNECTION
datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// CLIENT GENERATOR
generator client {
   provider = "prisma-client-js"
}

// Enums
enum LocationType {
   OFFICE
   MILL
   WAREHOUSE
}

enum UnitType {
   KG
   LTR
   PCS
}

enum OrderStatus {
   PENDING
   LOADING
   COMPLETED
}

enum WeighingType {
   INCOMING
   OUTGOING
}

enum TransactionType {
   DEBIT
   CREDIT
}

// Core Models
model Location {
   id      String       @id @default(cuid())
   name    String
   code    String       @unique
   type    LocationType
   address String

   users        User[]
   weighingLogs WeighingLog[]
   transactions Transaction[]
   orders       Order[]
   stocks       Stock[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Stock {
   id         String @id @default(cuid())
   locationId String
   itemId     String
   remaining  Float

   location Location @relation(fields: [locationId], references: [id])
   item     Item     @relation(fields: [itemId], references: [id])

   @@unique([itemId, locationId])
}

model Item {
   id          String   @id @default(cuid())
   typeId      String
   name        String
   code        String   @unique
   unit        UnitType
   description String?

   supplierItems SupplierItem[]
   contracts     Contract[]
   orders        Order[]
   Stock         Stock[]

   itemType ItemType @relation(fields: [typeId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model ItemType {
   id          String  @id @default(cuid())
   name        String
   code        String  @unique
   description String?

   items Item[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

// Supplier Models
model Supplier {
   id      String         @id @default(cuid())
   name    String
   code    String         @unique
   address String
   phone   String
   items   SupplierItem[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model SupplierItem {
   id           String         @id @default(cuid())
   supplierId   String
   itemId       String
   priceHistory PriceHistory[]
   weighingLogs WeighingLog[]

   supplier Supplier @relation(fields: [supplierId], references: [id])
   item     Item     @relation(fields: [itemId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([supplierId, itemId]) // Unique constraint on supplier-item combination
}

model PriceHistory {
   id           String        @id @default(cuid())
   itemId       String
   price        Float
   validFrom    DateTime      @default(now())
   validTo      DateTime?
   weighingLogs WeighingLog[]

   item SupplierItem @relation(fields: [itemId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

// Buyer Models
model Buyer {
   id        String     @id @default(cuid())
   name      String
   code      String     @unique
   address   String
   phone     String
   contracts Contract[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Contract {
   id           String        @id @default(cuid())
   buyerId      String
   itemId       String
   contractNo   String
   unitPrice    Float
   totalQty     Int
   remainingQty Int
   tolerance    Float
   terms        String?
   startDate    DateTime
   endDate      DateTime?
   orders       Order[]
   weighingLogs WeighingLog[]

   buyer Buyer @relation(fields: [buyerId], references: [id])
   item  Item  @relation(fields: [itemId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([buyerId, contractNo])
   @@index([buyerId, itemId]) // Index on buyer-item for faster queries
}

// Unified Weighing Log Model
model WeighingLog {
   id              String       @id @default(cuid())
   ticketNo        BigInt       @default(autoincrement())
   type            WeighingType
   locationId      String?
   operatorId      String
   itemId          String
   priceId         String?
   orderId         String?      @unique
   extendedOrderId String?      @unique
   driver          String
   plateNo         String
   licenseNo       String
   origin          String?
   entryTime       DateTime     @default(now())
   exitTime        DateTime?
   sealStartNo     Int? // Only for outgoing products
   sealEndNo       Int? // Only for outgoing products
   grossWeight     Int
   tareWeight      Int?
   netWeight       Float?
   quality         Float?       @default(0) // Quality grading, if applicable
   finalWeight     Float?

   // Relations
   operator     User          @relation(fields: [operatorId], references: [id])
   location     Location?     @relation(fields: [locationId], references: [id])
   item         SupplierItem  @relation(fields: [itemId], references: [id])
   priceHistory PriceHistory? @relation(fields: [priceId], references: [id])
   order        Order?        @relation("OrderToWeighingLog", fields: [orderId], references: [id])

   transactions Transaction[]

   createdAt  DateTime  @default(now())
   updatedAt  DateTime  @updatedAt
   Contract   Contract? @relation(fields: [contractId], references: [id])
   contractId String?

   @@index([locationId, operatorId, ticketNo, plateNo, exitTime])
   @@index([type, itemId]) // Index to quickly find logs by type and item
}

// Order Model
model Order {
   id         String      @id @default(cuid())
   orderNo    String      @unique
   contractId String
   locationId String
   itemId     String
   status     OrderStatus @default(PENDING)

   contract    Contract     @relation(fields: [contractId], references: [id])
   location    Location     @relation(fields: [locationId], references: [id])
   item        Item         @relation(fields: [itemId], references: [id])
   weighingLog WeighingLog? @relation("OrderToWeighingLog")

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

// Transaction Model
model TransactionCategory {
   id          String  @id @default(cuid())
   name        String  @unique
   description String?

   transactions Transaction[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Transaction {
   id              String          @id @default(cuid())
   transactionNo   String          @unique
   locationId      String
   weighingLogId   String? // Links to a specific weighing log if applicable
   transactionType TransactionType // INCOME or EXPENSE
   amount          Float
   description     String?
   transactionDate DateTime        @default(now())
   categoryId      String // References TransactionCategory for predefined types

   // Relations
   location    Location            @relation(fields: [locationId], references: [id])
   weighingLog WeighingLog?        @relation(fields: [weighingLogId], references: [id])
   category    TransactionCategory @relation(fields: [categoryId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([transactionType, categoryId])
}

// User Model
model User {
   id             String          @id @default(cuid())
   locationId     String?
   name           String?
   username       String?         @unique
   email          String?         @unique
   emailVerified  DateTime?
   image          String?
   password       String?
   accounts       Account[]
   sessions       Session[]
   authenticators Authenticator[]
   weighingLogs   WeighingLog[]

   location Location? @relation(fields: [locationId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([locationId])
}

model Account {
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String?
   access_token      String?
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String?
   session_state     String?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([provider, providerAccountId])
}

model Session {
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model VerificationToken {
   identifier String
   token      String
   expires    DateTime

   @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
   credentialID         String  @unique
   userId               String
   providerAccountId    String
   credentialPublicKey  String
   counter              Int
   credentialDeviceType String
   credentialBackedUp   Boolean
   transports           String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([userId, credentialID])
}
