datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
}

generator client {
   provider = "prisma-client-js"
}

enum OfficeTypeEnum {
   OFFICE
   MILL
}

enum PurchaseTypeEnum {
   PALM_FRUIT
   DIESEL_FUEL
   CALCIUM
}

model User {
   id            String             @id @default(cuid())
   officeId      String?
   name          String?
   username      String?            @unique
   email         String?            @unique
   emailVerified DateTime?
   image         String?
   password      String?
   accounts      Account[]
   sessions      Session[]
   // Optional for WebAuthn support
   Authenticator Authenticator[]
   PurchaseScale PurchasingScales[]
   user          Office?            @relation(fields: [officeId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([officeId])
}

model Account {
   id                       String  @id @default(cuid())
   userId                   String  @unique
   type                     String
   provider                 String
   providerAccountId        String
   refresh_token            String? @db.Text
   access_token             String? @db.Text
   expires_at               Int?
   token_type               String?
   scope                    String?
   id_token                 String? @db.Text
   session_state            String?
   refresh_token_expires_in Int?
   user                     User?   @relation(fields: [userId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([provider, providerAccountId])
   @@index([userId])
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([userId])
}

model VerificationToken {
   identifier String
   token      String
   expires    DateTime

   @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
   credentialID         String  @unique
   userId               String
   providerAccountId    String
   credentialPublicKey  String
   counter              Int
   credentialDeviceType String
   credentialBackedUp   Boolean
   transports           String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([userId, credentialID])
}

model Office {
   id      String         @id @default(cuid())
   name    String         @unique
   type    OfficeTypeEnum
   address String
   users   User[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Supplier {
   id            String             @id @default(cuid())
   name          String             @unique
   address       String
   phone         String
   PurchaseScale PurchasingScales[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model PurchasingScales {
   id             String            @id @default(cuid())
   operatorId     String?
   supplierId     String?
   purchaseType   PurchaseTypeEnum?
   driver         String?
   drivingLicense String?
   licensePlate   String?
   origin         String?
   entryTime      DateTime?
   exitTime       DateTime?
   bruto          Int?
   tara           Int?
   netto          Int?
   sorting        Float?
   total          Float?
   operator       User?             @relation(fields: [operatorId], references: [id])
   supplier       Supplier?         @relation(fields: [supplierId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}
